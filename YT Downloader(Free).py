import subprocess
from pathlib import Path
import threading
from tkinter import *
import urllib.request
from tkinter import colorchooser
import requests
from configparser import ConfigParser
from time import strftime, gmtime
from pytube import request
from pytube import YouTube
from tkinter import filedialog
from tkinter import messagebox
import os,sys,clipboard
import json
from win10toast import ToastNotifier
import _thread
from tkinter.ttk import Progressbar
from tkinter.ttk import Combobox
from datetime import datetime,date
from datetime import timedelta
from random import random
from random import randint
from random import seed
import time
import winreg
from pystray import MenuItem as item
import pystray
from PIL import Image, ImageTk
# import pywin32
import _thread
import socket, sys
from tkinter import ttk
from pytube.helpers import safe_filename
import urllib.request
import threading
from pySmartDL import SmartDL
from tqdm import tqdm
import re
now = datetime.now()
hour = now.strftime("%H")
minute = now.strftime("%M")
second = now.strftime("%S")
day = now.strftime("%d")
month = now.strftime("%m")
year = now.strftime("%Y")
fr = strftime("%Y-%m-%d %H:%M:%S", gmtime())
t = ToastNotifier()
i="0"
#BTHUC
url_regex = r"(https?://)?(www\.)?(youtube\.com/watch\?v=|youtu\.be/)([a-zA-Z0-9_-]{11})"

path_to_file = 'user.ini'
path = Path(path_to_file)

if path.is_file():
   pass
else:
    messagebox.showwarning("ERROR","Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh ƒë·ªÉ ƒë·ªçc d·ªØ li·ªáu!\nVui l√≤ng th√™m n√≥ t·ª´ trang web http://txaml.viwap.com/user.ini n·∫øu k c√≥ ho·∫∑c xem l·∫°i th∆∞ m·ª•c c√†i ƒë·∫∑t ·ª©ng d·ª•ng!\n C√≤n n·∫øu kh√¥ng ƒë∆∞∆°c n·ªØa th√¨ ib qua fb ·ªü menu Help nh√©!")
    raise SystemExit(0)

def check_internet_connection():
    try:
        # Ki·ªÉm tra k·∫øt n·ªëi b·∫±ng c√°ch m·ªü m·ªôt URL
        urllib.request.urlopen('https://yt-txa.mw.lt', timeout=1)
        return True
    except urllib.request.URLError as err:
        return False

def check_network_connection():
    try:
        # Ki·ªÉm tra k·∫øt n·ªëi b·∫±ng c√°ch t·∫°o m·ªôt socket
        socket.create_connection(("yt-txa.mw.lt", 80))
        return True
    except OSError:
        return False

def start_application():
    if check_internet_connection() and check_network_connection():
        # ·ª®ng d·ª•ng c·ªßa b·∫°n b·∫Øt ƒë·∫ßu ·ªü ƒë√¢y
        messagebox.showinfo("K·∫øt n·ªëi th√†nh c√¥ng‚úÖ‚úÖ‚úÖ", "‚òëÔ∏è‚úîÔ∏èK·∫øt n·ªëi th√†nh c√¥ng t·ªõi server!")
    else:
        wifi_icon = "üì∂"
        messagebox.showerror("K·∫øt n·ªëi th·∫•t b·∫°i t·ªõi server‚ùå‚ùå", f"{wifi_icon} B·∫°n hi·ªán kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng v√¨ v·∫≠y s·∫Ω kh√¥ng truy c·∫≠p ƒë∆∞·ª£c v√†o ·ª©ng d·ª•ng!\nVui l√≤ng k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i!!! ‚ù§Ô∏è‚ù§Ô∏è")
        sys.exit()


def show_update_notification():
    # T·∫°o ƒë·ªëi t∆∞·ª£ng ToastNotifier
    toaster = ToastNotifier()

    try:
        # Get the version data from the web
        url = 'https://yt-txa.mw.lt/get-version.json'
        response = requests.get(url)
        data = response.json()

        # Get the current version and compare it to the online version
        current_version = "3.7"
        online_version = data["pban"]
        if current_version < online_version:
            toaster.show_toast("C·∫≠p nh·∫≠t", f"ƒêang c√≥ phi√™n b·∫£n m·ªõi nh·∫•t l√† v{online_version}! H√£y v√†o thanh menu ch·ªçn 1 trong 2 ch·ª©c nƒÉng c·∫≠p nh·∫≠t b·∫£n 1 v√† b·∫£n 2 ƒë·ªÉ c·∫≠p nh·∫≠t n√≥ ƒëi n√†o!!!!\n¬©Ô∏èCOPY BY TXAVLOG!!", duration=10)
    except requests.exceptions.RequestException as e:
        messagebox.showerror("L·ªói k·∫øt n·ªëi m·∫°ng", str(e))
    except (KeyError, json.JSONDecodeError) as e:
        messagebox.showerror("L·ªói d·ªØ li·ªáu", str(e))
    except Exception as e:
        messagebox.showerror("L·ªói kh√¥ng x√°c ƒë·ªãnh", str(e))

def nen_i():
    # T·∫°o m·ªôt lu·ªìng (thread) ri√™ng bi·ªát ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
    notification_thread = threading.Thread(target=show_update_notification)
    notification_thread.start()

    txa.after(15000, nen_i)

#UPDATE
def update():
    start_time_2 = time.time()  # Kh·ªüi t·∫°o bi·∫øn start_time
    def check_for_updates():
        # Disable the Check for Updates button to prevent multiple updates
        check_for_updates_button.config(state="disabled")

        # Define the update function to run in a separate thread
        def do_update():
            try:
                # Get the version data from the web
                url = 'https://yt-txa.mw.lt/get-version.json'
                response = urllib.request.urlopen(url)
                data = json.loads(response.read())

                # Get the current version and compare it to the online version
                current_version = "3.7"
                online_version = data["pban"]
                if current_version == online_version:
                    messagebox.showinfo("Kh√¥ng c√≥ b·∫£n c·∫≠p nh·∫≠t kh·∫£ d·ª•ng", "App c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ·ªü phi√™n b·∫£n m·ªõi nh·∫•tüòÇ.")
                else:
                    # Prompt the user to download the update
                    if messagebox.askyesno("C·∫≠p nh·∫≠t kh·∫£ d·ª•ng",
                                        f"C√≥ 1 phi√™n b·∫£n m·ªõi: v{online_version} ƒë∆∞·ª£c t√¨m th·∫•y tr√™n trang web c·ªßa ch√∫ng t√¥i v√†o ng√†y {data['day']}/{data['mon']}/{data['year']}.\n B·∫°n c√≥ mu·ªën t·∫£i n√≥ ngay b√¢y gi·ªù?"):
                        
                        # Download the updated file
                        download_url = data["server_file"]
                        pattern = r'"(https://download[^"]+)"'
                        response = requests.get(download_url)
                        matches = re.findall(pattern, response.text)
                        if not matches:
                            print("Unable to find the download link.")
                            return
                        download_link = matches[0]
                        filename = download_link.split("/")[-1]
                        download_and_install(download_link, filename)

            except Exception as e:
                messagebox.showerror("Error", str(e))

            # Re-enable the Check for Updates button
            check_for_updates_button.config(state="normal")

        # Start the update thread
        update_thread = threading.Thread(target=do_update)
        update_thread.start()


    def download_and_install(download_url, filename):
        response = requests.get(download_url, stream=True)
        if response.status_code != 200:
            print("Unable to download the file.")
            return

        # Save the file to the specified output path
        with open(filename, "wb") as f, tqdm(
            total=int(response.headers.get("content-length", 0)), unit="B", unit_scale=True, unit_divisor=1024, ncols=80
        ) as progress_bar:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    progress_bar.update(len(chunk))

                    # Update the progress label
                    downloaded_size = os.path.getsize(filename)
                    total_size = int(response.headers.get("content-length", 0))
                    progress_percentage = (downloaded_size / total_size) * 100

                    # Format progress percentage with leading zero if less than 10
                    formatted_percentage = f"{progress_percentage:.2f}"
                    if progress_percentage < 10:
                        formatted_percentage = f"0{formatted_percentage}"

                    # Calculate remaining time
                    elapsed_time = time.time() - start_time_2
                    remaining_size = total_size - downloaded_size
                    download_speed = downloaded_size / elapsed_time if elapsed_time > 0 else 0
                    remaining_time = remaining_size / download_speed if download_speed > 0 else 0
                    remaining_minutes = int(remaining_time / 60)
                    remaining_seconds = int(remaining_time % 60)

                    # Update the progress label
                    progress_label.config(
                        text=f"ƒêang t·∫£i xu·ªëng... {formatted_percentage}% - Th·ªùi gian c√≤n l·∫°i: {remaining_minutes}m {remaining_seconds}s"
                    )

                    # Update the Tkinter window
                    update.update()

        # Prompt the user to install the update
        if messagebox.askyesno("C·∫≠p nh·∫≠t th√†nh c√¥ng", "T·∫£i xu·ªëng th√†nh c√¥ng, b·∫°n c√≥ mu·ªën c√†i ƒë·∫∑t n√≥ b√¢y gi·ªù kh√¥ng?"):
            subprocess.Popen([filename], shell=True)
            update.destroy()  # Quit the application without waiting for the installation process
        else:
            update.destroy()

    def on_closing():
        if messagebox.askokcancel("Tho√°t ·ª©ng d·ª•ng", "ƒêang trong qu√° tr√¨nh t·∫£i xu·ªëng. B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t?"):
            update.destroy()

    # Create the main window
    update = Tk()
    update.title("Ki·ªÉm tra c·∫≠p nh·∫≠t ·ª©ng d·ª•ng")

    # Create the Check for Updates button
    check_for_updates_button = Button(update, text="Check for Updates", command=check_for_updates)
    check_for_updates_button.pack(pady=10)

    # Create the progress bar and label
    progress_bar = ttk.Progressbar(update, orient="horizontal", mode="determinate")
    progress_label = Label(update, text="")
    progress_bar.pack(pady=10)
    progress_label.pack(pady=5)

    # Add the on_closing function to handle closing event
    update.protocol("WM_DELETE_WINDOW", on_closing)

    # Start the Tkinter event loop
    update.mainloop()


#S·ªë l·∫ßn t·∫£i xu·ªëng video:
# H√†m ƒë·ªÉ l·∫•y gi√° tr·ªã "downloads_left" t·ª´ registry key "SOFTWARE\\Button_DOWNLOAD"
def get_downloads_left():
    try:
        key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, "SOFTWARE\\Classes\\Applications\\YT Downloader(Free).exe\\Button_DOWNLOAD")
        downloads_left = winreg.QueryValueEx(key, "downloads_left")[0]
        winreg.CloseKey(key)
    except WindowsError:
        # Tr∆∞·ªùng h·ª£p key kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªõi key v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 50
        key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, "SOFTWARE\\Classes\\Applications\\YT Downloader(Free).exe\\Button_DOWNLOAD")
        downloads_left = 50
        winreg.SetValueEx(key, "downloads_left", 0, winreg.REG_DWORD, downloads_left)
        winreg.CloseKey(key)
    return downloads_left

# C·∫≠p nh·∫≠t label "S·ªë l·∫ßn t·∫£i xu·ªëng c√≤n l·∫°i" v√† ki·ªÉm tra s·ªë l·∫ßn t·∫£i xu·ªëng sau m·ªói kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh
def update_downloads_left_label():
    downloads_left = get_downloads_left()
    downloads_left_label.config(text="S·ªë l·∫ßn t·∫£i xu·ªëng c√≤n l·∫°i: {}".format(downloads_left))
    if downloads_left == 0:
        messagebox.showinfo("H·∫øt l∆∞·ª£t t·∫£i xu·ªëng", "B·∫°n ƒë√£ h·∫øt l∆∞·ª£t t·∫£i xu·ªëng video vui l√≤ng mua b·∫£n PRO ƒë·ªÉ kh√¥ng b·ªã gi·ªõi h·∫°n.")
        txa.destroy()
    else:
        txa.after(1000, update_downloads_left_label)

# Create a window
# msb_welcome = messagebox.showinfo("Welcome", "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi YouTube Downloader")
# msb_read = messagebox.showinfo("READ", "Khi s·ª≠ d·ª•ng ·ª©ng d·ª•ng l√† b·∫°n ƒë√£ ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n c·ªßa ch√∫ng t√¥i. ƒê·ªçc th√™m t·∫°i: https://bom.so/README")
# # msb_info = messagebox.showinfo("INFO", "APP ƒê∆Ø·ª¢C VI·∫æT B·ªûI TXA VLOG!")
txa = Tk()
txa.geometry('670x330')
txa.resizable(0,0)
txa.title("Tr√¨nh t·∫£i xu·ªëng video Youtube v3.7 - Free")
txa.resizable(False, False)
# txa.iconbitmap('logo.ico')
parser = ConfigParser()
parser.read('user.ini')
save_bgcolor = parser.get('setting', 'bg_color')
# new_bgcolor = parser.set('setting', 'bg_color', 'black')
save_path = parser.get('setting', 'noiluu')
save_tttb = parser.get('setting', 'tbao')
title_ban = parser.set('setting', 'phienban', 'Free')
lay_ngay = parser.get('setting', 'ngayhientai')
na_dat = str(day)+'/'+str(month)+'/'+str(year)+' '+str(hour)+':'+str(minute)+':'+str(second)
set_ngay = parser.set('setting', 'ngayhientai', na_dat)
check_duration = parser.get('setting', 'duration')
check_ne = parser.get('APP', 'check_start')
# T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫øn kh√≥a registry
key_path = "Software\\Classes\\Applications\\YT Downloader(Free).exe\\Time Trial"

# L·∫•y th·ªùi gian kh·ªüi ƒë·ªông ·ª©ng d·ª•ng t·ª´ registry
def get_start_time():
    try:
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path)
        value, regtype = winreg.QueryValueEx(key, "Time_Trial")
        return datetime.strptime(value, "%Y-%m-%d %H:%M:%S")
    except WindowsError:
        return None

download_path_exists = True
def check_download_path():
    global download_path_exists
    check_duration = parser.get('setting', 'duration')
    if not check_duration:
        check_duration = '1000'
        # L∆∞u gi√° tr·ªã 'check_duration' v√†o file c·∫•u h√¨nh
        parser.set('setting', 'duration', check_duration)
        with open('config.ini', 'w') as configfile:
            parser.write(configfile)
    save_path = fl
    if not os.path.exists(save_path):
        if download_path_exists:
            messagebox.showerror("L·ªói khi t·∫£i video!!ü§∂", "ƒê∆∞·ªùng d·∫´n b·∫°n ch·ªçn hi·ªán kh√¥ng t·ªìn t·∫°i, vui l√≤ng th·ª≠ ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n v√† b·∫•m l·∫°i n√∫t Download ƒë·ªÉ kh√¥ng b·ªã m·∫•t file t·∫£i xu·ªëngü•∞")
            pt_download.stop()
            download_path_exists = False
            print(f"ƒê∆∞·ªùng d·∫´n c·ªßa b·∫°n l√† {save_path} v·ªõi tr·∫°ng th√°i l√† {download_path_exists}!")
    else:
        download_path_exists = True
        print(f"ƒê∆∞·ªùng d·∫´n c·ªßa b·∫°n l√† {save_path} v·ªõi tr·∫°ng th√°i l√† {download_path_exists}!")
    with open("log.txaweb2", 'w') as f:
        f.write(f"ƒê∆∞·ªùng d·∫´n c·ªßa b·∫°n l√† {save_path} v·ªõi tr·∫°ng th√°i l√† {download_path_exists}!ƒê√¢y l√† b·∫£n üÜì")
        f.write('\n')
        f.write('üëâNgu·ªìn: ¬©Ô∏èTXA VLOG!!\n')
        f.close()
    txa.after(int(check_duration), check_download_path)


# L∆∞u th·ªùi gian kh·ªüi ƒë·ªông ·ª©ng d·ª•ng v√†o registry
def save_start_time():
    value = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, key_path)
    winreg.SetValueEx(key, "Time_Trial", 0, winreg.REG_SZ, value)

# T√≠nh s·ªë ng√†y c√≤n l·∫°i trong th·ªùi gian d√πng th·ª≠
def get_remaining_days():
    start_time = get_start_time()
    if start_time is None:
        save_start_time()
        start_time = get_start_time()
    days = (datetime.now() - start_time).days
    remaining_days = 30 - days
    return remaining_days if remaining_days > 0 else 0
    
    #return remaining_time if remaining_time > 0 else 0

# Ki·ªÉm tra th·ªùi gian d√πng th·ª≠
def check_trial():
    remaining_days = get_remaining_days()
    # # remaining_time = remaining_days()
    # remaining_time_seconds = int(remaining_time.total_seconds())
    # time = str(datetime.timedelta(seconds=remaining_time_seconds))
    # remaining_time_str = str(remaining_days)[:-7]
    if remaining_days == 0:
        messagebox.showinfo("Th√¥ng b√°o", "B·∫°n ƒë√£ h·∫øt th·ªùi gian d√πng th·ª≠. Vui l√≤ng mua b·∫£n PRO ho·∫∑c c√†i l·∫°i app ƒë·ªÉ kh√¥i ph·ª•c l·∫°i th·ªùi gian.")
        remain.config(text="ƒê√£ h·∫øt h·∫°n d√πng th·ª≠")
        txa.destroy()
    else:
        remain.config(text="B·∫°n c√≤n " + str(remaining_days) + " ng√†y d√πng th·ª≠!")

# C·∫≠p nh·∫≠t th·ªùi gian d√πng th·ª≠ m·ªói 1 gi√¢y
def update_time():
    check_trial()
    txa.after(1000, update_time)


with open ('user.ini', 'w') as f:
    parser.write(f)
txa.configure(background=save_bgcolor)
print(na_dat)
print(save_path)
print(save_bgcolor)
print(lay_ngay)
print("Tr·∫°ng th√°i th√¥ng b√°o: ",save_tttb)
print(time)



def donglenh():
    lenh = input()
    cmdArray = lenh.split(' ')
    while True:
        if len(cmdArray) == 2 and \
            cmdArray[0] == 'txa --l' and \
            cmdArray[1] == '--lol' or cmdArray[1] == '-l':
            lenh = "python . --lol" + cmdArray[1]
            subprocess.call(lenh, shell=True)
            ucc=True
        elif lenh == 'txa --help' or lenh == 'txa -h':
            ucc=False
            print("HELLO")
            break
        else:
            print("Sai l·ªánh r vui l√≤ng nh·∫≠p l·∫°i....")
            
for i in range(1,5):
    with open("user_account.txa", 'w+', encoding="UTF-8") as f:
        f.write("TIME: "+ str(hour)+':'+str(minute)+':'+str(second)+'\n')
        f.write(str(i))
        f.write('\n')
        f.write("DATE: "+str(day)+'\n')
        f.write("MONTH: "+str(month)+'\n')
        f.write("YEARS: "+str(year)+'\n')
        f.close()

def changebg(event=None):
    
    color2 = colorchooser.askcolor()[1]
    if color2:
        if color2 == '#0d0006' or color2 == '#020202' or color2 == '#121212' or color2 == '#070707':
            color2 = 'black'
        else:
            parser.set('setting','bg_color',color2)
        with open('user.ini','w') as f:
            parser.write(f)
        txa.configure(background=color2)

def resetbg(event=None):
    color2 = 'black'
    parser.set('setting','bg_color',color2)
    with open('user.ini','w') as f:
            parser.write(f)
    txa.configure(background=color2)

def setting(event=None):
    uk = Toplevel(txa)
    check_ne = parser.get('APP', 'check_start')
    uk.grab_set()
    uk.title("C√†i ƒë·∫∑t")
    uk.geometry('400x400')
    check_duration = parser.get('setting', 'duration')
    uk.resizable(False, False)
    anh = Label(uk, text='Th√¥ng b√°o khi t·∫£i xong: ', font=("Verdana italic", 13), background='red')
    anh.place(x=10, y=5)
    time_entry_var = StringVar()

#SAVE SETTING IN CONFIG FILE
    def save():
        lol = str(var.get())
        dlo = time_entry_var.get()
        clo = str(car.get())
        print(lol)
        print(f"CM{clo}")
        print(f"TH·ªùi gian ki·ªÉm tra l√†: {dlo}ms")
        if lol == save_tttb and dlo == check_duration:
            messagebox.showinfo("ERROR","B·∫°n ƒë√£ c√†i ƒë·∫∑t th√†nh nh∆∞ th·∫ø r thi!")
        if clo == "1":
            check_status_net = "True"
        elif clo == "2":
            check_status_net = "False"
        else:
            check_status_net = "None"
        # if lol == 1:
        #     lol = "True"
        # else:
        #     lol = "False"
        # # i+=1
        # if save_tttb == 1:
        #     lol = 1
        # else: 
        #     lol = 2
        parser.set('setting','tbao', lol)
        parser.set('setting', 'duration', dlo)  # L∆∞u gi√° tr·ªã nh√¢n 1000 (d·∫°ng chu·ªói) v√†o file c·∫•u h√¨nh
        parser.set('APP', 'check_start', check_status_net)
        with open("user.ini", 'w')as f:
            parser.write(f)
        print("ƒê√£ l∆∞u!")
        
        messagebox.showinfo("TH√îNG B√ÅO", "Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t!")
        uk.destroy()
        return "break"
    if check_duration == '' or check_duration is None:
        time_entry_var.set('1000')  # ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† '1000'
    else:
        if int(check_duration) > 60000:
            time_entry_var.set('59000')
        elif int(check_duration) < 1000:
            random_duration = randint(1000, 2000)  # Sinh s·ªë ng·∫´u nhi√™n t·ª´ 1000 ƒë·∫øn 2000
            time_entry_var.set(str(random_duration))
        elif check_duration.isnumeric():
            time_entry_var.set(check_duration)  # Gi·ªØ nguy√™n gi√° tr·ªã ban ƒë·∫ßu c·ªßa time_entry_var
        else:
            time_entry_var.set('1000')  # N·∫øu gi√° tr·ªã kh√¥ng ph·∫£i l√† s·ªë, ƒë·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† '1000'
#RADIO STATUS
    var = IntVar()
    r1 = Radiobutton(uk, text="B·∫≠t", variable=var, value=1)
    r1.place(x=230, y=5)
    r2 = Radiobutton(uk, text="T·∫Øt", variable=var, value=2)
    r2.place(x=275, y=5)
    check_path_status_var = IntVar()
            
        # Th√™m ch·ª©c nƒÉng nh·∫≠p th·ªùi gian
    time_label = Label(uk, text='Nh·∫≠p th·ªùi gian (ƒë∆°n v·ªã miligi√¢y):', borderwidth=2, relief="raised", font=("Arial", 13), background='#C0F0CC')
    time_label.place(x=10, y=30)
    time_entry = Entry(uk, textvariable=time_entry_var, font=("Arial", 13), width=10)
    time_entry.place(x=260, y=30)
    check_net = Label(uk, text="Ki·ªÉm tra k·∫øt n·ªëi t·ªõi server m·ªói khi kh·ªüi ƒë·ªông: ", borderwidth=4, relief="raised", font=("Verdana", 7), background='#0fc0ff')
    check_net.place(x=10, y=55)
    car = IntVar()
    check_net_bt_1 = Radiobutton(uk,text="C√≥", variable=car, value=1)
    check_net_bt_1.place(x=240, y=55)    
    check_net_bt_2 = Radiobutton(uk,text="Kh√¥ng", variable=car, value=2)
    check_net_bt_2.place(x=285, y=55)
    if save_tttb == "1":
            var.set('1')
    elif save_tttb == "2":
            var.set('2')
    else:
            print("LOI")
    if check_ne == "True":
        car.set('1')
    elif check_ne == "False":
        car.set('2')
    else:
        print("K t·ªìn t·∫°i")
    ani = Label(uk, text='ƒêg update....', font=("Digital-7", 30))
    ani.place(x=10, y=210)
# if day == "23" and month == "06" and year == "2022":
#         t = ToastNotifier()
#         t.show_toast("The update is available", "ƒê√É C√ì B·∫¢N C·∫¨P NH·∫¨T M·ªöI!")
#SAVE BUTTON
    button = Button(uk, text="L∆∞u c√†i ƒë·∫∑t", command=save, background='blue')
    button.place(x=15, y=370)

def about_window(event=None):
    tt=Toplevel(txa)
    tt.title("TH√îNG TIN Phi√™n b·∫£n‚è¨: ")
    tt.transient(txa)
    tt.resizable(False, False)
    tt.geometry('600x500')
    tt.configure(bg='blue')
    def close():
        tt.destroy()
        tt.protocol('WM_DELETE_WINDOW', close)
        return "break"

    def contact():
        os.startfile("https://bom.so/FB_ADMIN")

    def dow():
        os.startfile("https://yt-txa.mw.lt")

    def buypro():
        # os.startfile("http://txaml.viwap.com/buy.html")
        os.startfile("https://yt-txa.mw.lt/buy.html")

    a1 = Label(tt, text="üíñAPP ƒê∆Ø·ª¢C VI·∫æT B·ªûI TXA VLOG!üíñ", font=("Courier New", 12), background='red')
    a1.place(x=12, y=30)
    a2 = Label(tt, text="¬©Ô∏èCOPYRIGHT BY TXA VLOG! ‚ùåDO NOT REUP‚ùå", font=("Courier New", 12), background='red')
    a2.place(x=12, y=50)
    a3 = Label(tt, text="üëâƒê√¢y l√† b·∫£n Free!\n üëâKhuy√™n b·∫°n h√£y mua b·∫£n Pro ·ªü trang web c·ªßa ch√∫ng t√¥i!\n üëâƒê·ªÉ t·∫≠n h∆∞·ªüng ƒëc ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng nh√©!!!üòçüòç", font=("Digital-7", 13), background='green')
    a3.place(x=12, y=70)
    a4 = Button(tt, text="CONTACT ME", font=("Times New Roman", 12), background='red', foreground='yellow', command=contact)
    a4.place(x=12, y=150)
    a5 = Label(tt, text="B·∫•m v√†o ƒë√¢y ƒë·ªÉ quay l·∫°i‚òùÔ∏è", font=("Arial", 12))
    a5.place(x=400, y=5)
    a6 = Button(tt, text="‚ñ∂Ô∏èGO TO DOWNLOAD APP", font=("Verdana italic", 12), background='brown', foreground='red', command=dow)
    a6.place(x=130, y=150)
    a7 = Button(tt, text="üì≤Mua b·∫£n PRO", font=("Arial underline", 13), bg='red', fg='yellow', command=buypro, cursor='plus')
    a7.place(x=380, y=150)




def txa_popup(e):
    txa_menu.tk_popup(e.x_root, e.y_root)

def contact():
    os.startfile("https://bom.so/FB_ADMIN")

def exi():
    # a = messagebox.askyesno("üñêD·ª´ng l·∫°iüñê", "‚ùåB·∫°n c√≥ ƒëang t·∫£i g√¨ k ƒë·∫•y????‚ùå")
    # if a==True:
    #     pass
    # elif a==False:
        raise SystemExit(0)

def error():
    messagebox.showwarning("‚ùåKh√¥ng kh·∫£ d·ª•ng‚ùå","üëâPh√≠m t·∫Øt n√†y ch·ªâ c√≥ s·∫µn trg phi√™n b·∫£n Pro!\nVui l√≤ng mua n√≥ ƒë·ªÉ d√πng ph√≠m t·∫Øt n√†y‚òùÔ∏è")

def error1():
    messagebox.showwarning("‚ùåKh√¥ng kh·∫£ d·ª•ng‚ùå","üëâPh√≠m t·∫Øt n√†y hi·ªán ch·ªâ c√≥ s·∫µn trg phi√™n b·∫£n Pro!\nVui l√≤ng mua n√≥ ƒë·ªÉ d√πng ph√≠m t·∫Øt n√†y‚òùÔ∏è")

def di():
    urls = str(url.get())
    clipboard.copy(urls)
    clipboard.paste()

fl = ''
def get_path():
    global fl
    fl = filedialog.askdirectory(title="üëáCH·ªåN N∆†I L∆ØU FILE T·∫¢I XU·ªêNG C·ª¶A B·∫†Nüëá - ¬©COPY BY TXA VLOG")
    path.set(fl)
    if len(fl) == 0:
        msb_path = messagebox.showwarning("warning", "‚ùåVui l√≤ng ch·ªçn ƒë∆∞·ªùng d·∫´n‚ùå")
    else:
        pass

def shortcut():
    st=Toplevel(txa)
    st.title("TH√îNG TIN Ph√≠m t·∫Øt‚è¨: ")
    st.transient(txa)
    st.resizable(False, False)
    st.geometry('750x250')
    st.configure(bg='blue')

# take the data
    class Table:
     
        def __init__(self,root):
    # t = Table(txa)
            for i in range(total_rows):
                    for j in range(total_columns):
                        
                        self.e = Entry(st, width=20, fg='blue',
                                    font=('Arial',10,'bold'), bd=6, highlightcolor='red', cursor="cross")
                        
                        self.e.grid(row=i, column=j)
                        self.e.insert(END, lst[i][j])
    lst = [
        ('STT', "Ph√≠m t·∫Øt", "Ch·ª©c nƒÉng"),
        (1,'Ctrl+W','Hth·ªã b·∫£n quy·ªÅn'),
        (2, "Ctrl+K", "Hth·ªã th√¥ng tin"),
        (3, "Ctrl+R", "RESET M√ÄU N·ªÄN V·ªÄ M·∫∂C ƒê·ªäNH"),
        (4, "Ctrl+I", "ƒê·ªïi m√†u n·ªÅn app"),
        (5, "Ctrl+Shift+I", "M·ªü c√†i ƒë·∫∑t"),
        (6, "ƒêg c·∫≠p nh·∫≠t th√™m ", "cho b·∫£n Free.")
        # (4,'Rachna','Mumbai'),
        # (5,'Shubham','Delhi')
        ]
    
    # find total number of rows and
    # columns in list
    total_rows = len(lst)
    total_columns = len(lst[0])
    t = Table(st)

current_percentage = 0  # Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u gi√° tr·ªã ph·∫ßn trƒÉm hi·ªán t·∫°i

def show(ul, chunk, byte_remaining):
    global current_percentage

    downloaded = ul.filesize - byte_remaining
    total_size = ul.filesize
    new_percentage = int((downloaded / total_size) * 100)

    if new_percentage > current_percentage:
        for percentage in range(current_percentage + 1, new_percentage + 1):
            current_percentage = percentage
            pt_download['value'] = current_percentage
            status.configure(text="DOWNLOADING...{:02d}%".format(current_percentage))
            txa.after(100, lambda: None)  # C·∫ßn c√≥ m·ªôt t√°c v·ª• nh·ªè ƒë·ªÉ tr√°nh ƒë√≥ng bƒÉng ·ª©ng d·ª•ng

    if new_percentage == 100:
        status.configure(text="T·∫£i xu·ªëng th√†nh c√¥ng! üéâ")
    else:
        txa.after(100, lambda: show(ul, chunk, byte_remaining))

def download():
    urls = str(url.get())
    mk = cbb.get()
    global fl
    downloads_left = get_downloads_left()
    if downloads_left > 0:
        downloads_left -= 1
        key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, "SOFTWARE\\Classes\\Applications\\YT Downloader(Free).exe\\Button_DOWNLOAD")
        winreg.SetValueEx(key, "downloads_left", 0, winreg.REG_DWORD, downloads_left)
        winreg.CloseKey(key)
        downloads_left_label.config(text="S·ªë l·∫ßn t·∫£i xu·ªëng c√≤n l·∫°i: {}".format(downloads_left))
    else:
        messagebox.showinfo("H·∫øt l∆∞·ª£t t·∫£i xu·ªëng", "B·∫°n ƒë√£ h·∫øt l∆∞·ª£t t·∫£i xu·ªëng video.")
        txa.destroy()
    # yt = YouTube(urls)
    # status = Label(txa, font=("Arial bold", 15), background='#ff0fff')
    # status.place(x=50, y=160)
    # status.configure(text = "DOWNLOADING...")
    # stream = ul.length
    
    if not re.match(url_regex, urls):
        messagebox.showerror("L·ªói", "URL video kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng!\n Vui l√≤ng vi√™t theo ƒë·ªãnh d·∫°ng: https://(http://)youtube.com(youtu.be)/watch?v=id(id)")
        return
    ul = YouTube(str(url.get()), on_progress_callback=show, use_oauth=False, allow_oauth_cache=True)
    if not fl:
        msb_path = messagebox.showwarning("C·∫¢NH B√ÅO", "‚ùåVui l√≤ng ch·ªçn ƒë∆∞·ªùng d·∫´n‚ùå")
    if not cbb:
        messagebox.showwarning("C·∫¢NH B√ÅO","‚ùåVui l√≤ng ch·ªçn ch·∫•t l∆∞·ª£ng ƒë·ªÉ t·∫£i xu·ªëng‚ùå")

    print("DOWNLOADING>>>>>>", urls)
    status.config(text="‚ú®GETTING DATA FROM YOUTUBE.")
    time.sleep(0.1)
    status.config(text="‚ú®‚ú®GETTING DATA FROM YOUTUBE..")
    time.sleep(0.3)
    status.config(text="‚ú®‚ú®‚ú®GETTING DATA FROM YOUTUBE...")
    status.config(text="‚ú®GETTING DATA FROM YOUTUBE.")
    time.sleep(0.3)
    status.config(text="‚ú®‚ú®GETTING DATA FROM YOUTUBE..")
    time.sleep(0.5)
    status.config(text="‚ú®‚ú®‚ú®GETTING DATA FROM YOUTUBE...")
    check_download_path()
    if(mk == ''):
        messagebox.showerror("C·∫¢NH B√ÅO", "‚ùåVui l√≤ng ch·ªçn ch·∫•t l∆∞·ª£ng ƒë·ªÉ t·∫£i xu·ªëng!")
    elif(mk == qua[0]):
        a = ul.streams.filter(progressive=True, file_extension='mp4').get_highest_resolution()
        b = a.download(fl, filename='TXA VLOG - ' + safe_filename(ul.title) + ' - 720p.mp4')
        az = "720p"
        file_extension = '.mp4'
        chatluong = "video: 720p"
    elif(mk == qua[1]):
        a = ul.streams.filter(progressive=True, file_extension='mp4').get_by_resolution('360p')
        b = a.download(fl, filename='TXA VLOG - ' + safe_filename(ul.title) + ' - 360p.mp4')
        file_extension = '.mp4'
        chatluong = "video: 360p"
        az = "360p"
    elif(mk == qua[2]):
        a = ul.streams.filter(progressive=True, file_extension='mp4').get_lowest_resolution()
        b = a.download(fl, filename='TXA VLOG - ' + safe_filename(ul.title) + ' - 144p.mp4')
        file_extension = '.mp4'
        chatluong = "video: 144p"
        az = "144p"
    elif(mk == qua[3]):
        # a = ul.streams.filter(progressive=True, file_extension='mp4').get_by_resolution('240p')
        # b = a.download(fl, filename='TXA VLOG - ' + safe_filename(ul.title) + ' - 240p.mp4')
        # print(b)
        # file_extension = '.mp4'
        # chatluong = "video: 240p"
        a = ul.streams.filter(only_audio=True).first()
        b = a.download(fl, filename='TXA VLOG - ' + safe_filename(ul.title) + ' - 128kps.mp3')
        file_extension = '.mp3'
        chatluong = "nh·∫°c: 128kps"
        az = "128kps"
    #     a = ul.streams.filter(progressive=True, only_audio=True).first().download(fl)
        # file_name = b.title
        # # ten_vd2 = ten_vd.replace("|", " ")
    size = round(a.filesize/1024/1024, 2)
        # thoigian = b.length
    thoigian = ul.length
    duration_str = f"{thoigian // 3600}:{(thoigian // 60) % 60}:{thoigian % 60}"
    luot_Xem_htai = ul.views
    kenh = ul.channel_url
    key = ul.keywords
    mta = ul.description
    meta = ul.age_restricted
    s = ul.metadata
    parser.set('setting', 'noiluu', fl)
    with open('user.ini','w') as f:
        parser.write(f)
        # file_size = round(a.filesize/1024/1024, 2)
        # text_info.insert("K√≠ch th∆∞·ªõc: " + str(file_size) + "MB" + "\n" + "ƒê·ªãa ch·ªâ: " + str(file_name) + "\n")
    # tbao = ToastNotifier()
    # tbao.show_toast("DOWNLOADED VIDEO", "ƒê√É T·∫¢I XONG VIDEO. \n K√≠ch th∆∞·ªõc ∆∞·ªõc l∆∞·ª£ng: " + str(size)+"MB! \n H√£y ki·ªÉm tra n√≥ ƒëi n√†o!!!!\n APP BY TXA VLOG:))")
    if save_tttb == "1":
        messagebox.showinfo("Th√¥ng b√°o", "T·∫£i xu·ªëng th√†nh c√¥ng. \nVui l√≤ng ki·ªÉm tra th∆∞ m·ª•c " + fl + "\n V·ªõi t√™n: " + safe_filename(ul.title) + file_extension + "\n K√≠ch th∆∞·ªõc: " + str(size) + "MB" + "\n Th·ªùi gian: "+ duration_str + "\n Ch·∫•t l∆∞·ª£ng " + str(chatluong))
        messagebox.showinfo("Th√¥ng tin tr√™n YT v·ªÅ video t·ª´ link c·ªßa b·∫°n", "S·ªë l∆∞·ª£t xem video ·ªü th·ªùi ƒëi·ªÉm ht·∫°i: " + str(luot_Xem_htai) + " views! \n URL k√™nh: " + kenh + "\n T·ª´ kh√≥a video: " + str(key))
    elif save_tttb == "2": 
        pass
    # status = Label(txa, text="DOWNLOADED!", font=("Arial bold", 15), background='#ff0fff').place(x=50, y=160)
    else: 
        print("L·ªñI FILE C·∫§U H√åNH")
    status.config(text="ƒê√£ t·∫£i xong")
    txa.title("VideoDownloaded t·∫°i th∆∞ m·ª•c: " + fl + "!Ch·∫•t l∆∞·ª£ng: "+ az)
    with open("M√¥ t·∫£ v·ªÅ video-with open notepad "+safe_filename(ul.title)+".data", "w") as file:
        file.write(str(mta))
        file.write("\n\n")
        file.write("T·∫†O V√ÄO L√öC: "+str(day)+'/'+str(month)+'/'+str(year)+' '+str(hour)+':'+str(minute)+':'+str(second)+'!\n')
        file.write("URL VIDEO: "+urls+'\n')
        file.write("Ch·∫•t l∆∞·ª£ng: "+az+'\n')
        file.write("N∆°i l∆∞u file video n√†y: " + fl + "/" + safe_filename(ul.title) + file_extension+"!\n")
        file.write("¬©FILE BY TXA VLOG!!IB FB ME: https://bom.so/FB_ADMIN")
        file.close()
    with open(fl+"HELLO.txt","w") as f:
        f.write("LOL")
        f.close()

    print(meta) 
    print(str(s))
    # + "Th·ªùi gian: " + str(thoigian) + "s"
    # END, "T√™n video: " + ten_vd  + "\n" 
def info(event=None):
    messagebox.showinfo("INFO", "üíñAPP ƒê∆Ø·ª¢C VI·∫æT B·ªûI TXA VLOG!üíñ")
    messagebox.showinfo("INFO", "‚úùCh·ª©c nƒÉng: T·∫¢I XU·ªêNG VIDEO YOUTUBE")
    messagebox.showinfo("INFO", "‚úîVERSION 3.7\n N·∫øu c√≥ th·∫Øc m·∫Øc ib fb: https://bom.so/FB_ADMIN")

# def clif():
#     messagebox.showinfo("INFO", "‚úîVERSION 2.2\n N·∫øu c√≥ th·∫Øc m·∫Øc ib fb: https://bom.so/FB_ADMIN")

def check():
    ht ="3.7"
    # htt = ht.split(',')
    print("ƒêANG KI·ªÇM TRA PHI√äN B·∫¢N V√Ä S·∫º TB√ÅO N·∫æU C√ì PHI√äN B·∫¢N M·ªöI V√å V·∫¨Y H√ÉY ƒê·ª¢I!!")
    for d in range(2):
        messagebox.showwarning("C·∫£nh b√°o", "CHECKING UPDATEüòé")
        print("CHECKING.")
        print("CHECKING..")
        print("CHECKING...")
        time.sleep(1)
    version = requests.get('https://yt-txa.mw.lt/get-version.json')
    # version = version.encoding("utf-8")

    up = version.json()
    d1 = f'{up["day"]}'
    m1 = f'{up["mon"]}'
    y1 = f'{up["year"]}'
    getdl = f'{up["pban"]}'

    for i in range(3):
        with open('CHECKING UPDATE_'+ str(year)+str(month)+str(day)+'-'+str(hour)+str(minute)+str(second)+'.txa', "+w") as f:
            f.write('CHECK UPDATE....')
            f.write('\n')
            f.write('Phi√™n b·∫£n hi·ªán t·∫°i c·ªßa b·∫°n l√†: '+str(ht)+'\n')
            f.write("Phi√™n b·∫£n tr√™n trang web c·ªßa ch√∫ng t√¥i: "+str(getdl)+'\n')
            f.write("DATE: "+ str(year)+'/'+str(month)+'/'+str(day)+'-'+str(hour)+':'+str(minute)+':'+str(second)+'('+str(fr)+')'+'\n')
            f.write("INDEX OF "+str(i)+'\n')
            f.write("DATE UPDATE: "+str(d1)+'/'+str(m1)+'/'+str(y1)+'\n')
            f.write("¬©Ô∏èCopy by TXA VLOG!!¬ÆÔ∏è\n")
            f.write("ƒê√¢y l√† b·∫£n üÜìüÜìüÜìüÜì!")
            f.close()
    # htai = f'{up["hta"]}'
    if getdl > str(ht):
        messagebox.showinfo("The update is available v" +getdl, "ƒê√É C√ì B·∫¢N C·∫¨P NH·∫¨T M·ªöI V√ÄO NG√ÄY "+day+'/'+month+'/'+year+"!\n H√ÉY TRUY C·∫¨P TRANG WEB https://bom.so/YouTube-Downloader ƒë·ªÉ l·∫•y phi√™n b·∫£n m·ªõi nh·∫•t!!üôå")
    elif getdl < str(ht):
        messagebox.showerror("There is no update", "CHX C√ì B·∫¢N C·∫¨P NH·∫¨T KH·∫¢ D·ª§NGüòÇ("+ht+")")

    else:
        messagebox.showwarning("THIS IS A UPDATE LASTED VERSION!!" + str(ht), "B·∫†N ƒêANG ·ªû PB·∫¢N MS NH·∫§T R C√íN G√åüòíüòíüòí!")
    print("DONE!!")
        
# Create a label
title_window = Label(txa, text="YouTube Downloader", font=("Arial bold", 20), background='#f5f5f5').place(x=190, y=10)

#INSERT URL
url = StringVar()
url_label = Label(txa, text="URL:", font=("Arial bold", 15), background='#ff0f0f').place(x=70, y=70)
url_entry = Entry(txa, width=30,textvariable = url, font=("Arial bold", 15), background='#00cf0f').place(x=150, y=70)

#RIGHTMENU
txa_menu = Menu(txa, tearoff=False)
txa_menu.add_command(label="Copy url", command=di)
txa_menu.add_separator()
txa_menu.add_command(label="CONTACT ME", command=contact)

txa.bind("<Button-3>", txa_popup)

#INSERT PATH
path = StringVar()
path_label = Label(txa, text="PATH:", font=("Arial bold", 15), background='#ff0fce').place(x=70, y=100)
path_e = Entry(txa,text=save_path, width=30, font=("Arial bold", 15), background='#00cf0f', textvariable=path).place(x=150, y=100)
path_button = Button(txa,height=-50, text="Browse", font=("Arial bold", 15), background='#00cfff', command=get_path).place(x=500, y=100)

#INSERT COMBOBOX
combo_label = Label(txa, text="Quality:", font=("Arial bold", 15), background='#f00f0f').place(x=70, y=130)
qua = ["Cao(720p)", "360p", "144p", "MP3 Audio File"]
cbb = Combobox(txa, width=30, font=("Arial bold", 15),state='readonly', values=qua, background='#00c00f')
cbb.grid(column=0, row=0, sticky=(W, E))
cbb.place(x=150, y=130)


#PT_DOWNLOAD
pt_download = Progressbar(txa, orient='horizontal', length=300, mode='determinate')
pt_download.place(x=90, y=190)

#BUTTON
btn_download = Button(txa, text="Download", font=("Arial bold", 15), background='#00cfff', command=lambda:_thread.start_new_thread(download, ())).place(x=220, y=230)
# btn_info = Button(txa, text="Xem th√¥ng tin app", font=("Arial bold", 15), background='#00cfff', command=info).place(x=120, y=230)
# btn_clif = Button(txa, text="Xem phi√™n b·∫£n", font=("Arial bold", 15), background='#00cfff', command=clif).place(x=500, y=230)
# btn_check = Button(txa, text="Ki·ªÉm tra c·∫≠p nh·∫≠t", font=("Arial bold", 16), background='#00cfff', command=check).place(x=450, y=230)

#STATUS
status = Label(txa, font=("Arial bold", 15), background='#ff0fff')
status.place(x=90, y=160)

#TEXT_INFO
text_info = Label(txa, width=50, height=10, font=("Arial bold", 15), background='#00cfff')

#REMAIN FREE
remain = Label(txa, text='Tgian d√πng th·ª≠ ·ªü ƒë√¢y', font=("Verdana italic", 16), background='#f0c0ff')
remain.place(x=10, y=290)

#OPTION LEFT
menubadr = Menu(txa, selectcolor='#fff0cc')
fme = Menu(menubadr,tearoff=0)
sub = Menu(fme, tearoff=0)


# fme.add_cascade(label='FUNCTION', menu=sub)
# fme.add_separator()
# sub.add_command(label="LOL", command=te)
fme.add_command(label='Exit', command=exi)
fme.add_separator()
fme.add_command(label='C√°c ph√≠m t·∫Øt trg app', command=shortcut)
fme.add_separator()
fme.add_command(label='Setting', command=lambda: setting(True), accelerator='Ctrl+Shift+I')

#HELP
hep = Menu(menubadr, tearoff=False, font=("Arial bold", 12))
hep_sup = Menu(hep, tearoff=0, font=("Arial bold", 11))

#OPTION HELP
hep.add_cascade(label='Th√¥ng tin', command=lambda: info(True), accelerator='Ctrl+K')
hep.add_separator()
hep.add_cascade(label='Check c·∫≠p nh·∫≠t', command=check, font=("Arial italic", 10))
hep.add_separator()
hep.add_cascade(label='Check c·∫≠p nh·∫≠t phi√™n b·∫£n 2(Online)', command= lambda:update(), font=("Verdana italic", 14))
hep.add_separator()
hep.add_command(label='B·∫£n quy·ªÅn', accelerator='Ctrl+W', command=lambda: about_window(True), compound='left', underline=0, font=("Arial", 10))
# hep.add_separator()

#MENU OPTION
opt = Menu(menubadr, tearoff=False)
opt_s = Menu(opt, tearoff=0)

opt.add_command(label='ƒê·ªïi m√†u n·ªÅn(background) app', accelerator='Ctrl+I', command=lambda: changebg(True), compound='left', font=("Verdana bold", 12))
opt.add_separator()
opt.add_command(label='Reset m√†u v·ªÅ m·∫∑c ƒë·ªãnh', accelerator='Ctril+R', command=lambda: resetbg(True), compound='left',font=("Times New Roman italic", 11))

#txa.bind("<Button-3>", show)
def show_window(icon, item):
   icon.stop()
   txa.after(0,txa.deiconify())

def quit_window(icon, item):
   icon.stop()
   txa.destroy()

# Label ƒë·ªÉ hi·ªÉn th·ªã s·ªë l·∫ßn t·∫£i xu·ªëng c√≤n l·∫°i
downloads_left_label = Label(txa, text="")
downloads_left_label.pack()

# Hide the window and show on the system taskbar
def hide_window():
   messagebox.showinfo("ü•áü•áƒê√É THU NH·ªé","üôåüôå·ª®NG D·ª§NG ƒê√É ƒêC THU NH·ªé XU·ªêNG KHAY H·ªÜ TH·ªêNG!!")
   messagebox.showinfo("üëâüëâüëâüëâTH√îNG TINüçÄüçÄ", "üîΩüîΩüîΩVUI L√íNG CLICK CHU·ªòT PH·∫¢I V√ÄO ICON ·ªû KHAY H·ªÜ TH·ªêNG V√Ä CH·ªåN CH·ª®C NƒÇNG C·∫¶N THI·∫æT!!üîΩüîΩ")
   #t.show_toast("ü•áü•áƒê√É THU NH·ªé", "üôåüôå·ª®NG D·ª§NG ƒê√É ƒêC THU NH·ªé XU·ªêNG KHAY H·ªÜ TH·ªêNG!!üìç üìç", icon_path="logo.ico")
   #t.show_toast("üëâüëâüëâüëâTH√îNG TINüçÄüçÄ", "üîΩüîΩüîΩVUI L√íNG CLICK CHU·ªòT PH·∫¢I V√ÄO ICON ·ªû KHAY H·ªÜ TH·ªêNG V√Ä CH·ªåN CH·ª®C NƒÇNG C·∫¶N THI·∫æT!!üîΩüîΩ", icon_path="logo.ico")
   txa.withdraw()
   image=Image.open("logo.ico")
   menu=(item('Hi·ªÉn th·ªã app', show_window), item('Tho√°t', quit_window), item('Check c·∫≠p nh·∫≠t', check), item('Trang web', contact))
   icon=pystray.Icon("name", image, "YT DOWNLOADER TXA - Free", menu)
   icon.run()


menubadr.add_cascade(label='File', menu=fme, font=("Arial bold", 9))
menubadr.add_cascade(label='Help', menu=hep, font=("Arial bold", 9))
menubadr.add_cascade(label='Option', menu=opt, font=("Verdana italic", 9))

txa.config(menu=menubadr)
# def key_press(evt):
#     # if evt=='Alt-q':
#     #     exi()
#     # elif 'Alt 1' in evt:
#     #     info()
#     if evt == "state=0x20000 keysym=q keycode=81 char='q'":
#         exi()

# txa.bind("<Alt-q>", key_press)


# txa.bind("<Alt-1>", key_press)
# txa.bind_all("<Alt-q>", error)
txa.bind("<Control-W>", about_window)
txa.bind("<Control-w>", about_window)
txa.bind("<Control-r>", resetbg)
# txa.bind("<Alt-d>", error1)
txa.bind("<Control-K>", info)
txa.bind("<Control-k>", info)
txa.bind("<Control-i>", changebg)
txa.bind("<Control-I>", setting)
# nen_i()
update_time()

if check_ne == "True":
# G·∫Øn s·ª± ki·ªán ki·ªÉm tra k·∫øt n·ªëi m·∫°ng khi ·ª©ng d·ª•ng ƒë∆∞·ª£c m·ªü
    start_application()
# txa.protocol('WM_DELETE_WINDOW', hide_window)

# B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh
downloads_left = get_downloads_left()
downloads_left_label.config(text="S·ªë l·∫ßn t·∫£i xu·ªëng c√≤n l·∫°i: {}".format(downloads_left))
if downloads_left == 0:
    messagebox.showinfo("H·∫øt l∆∞·ª£t t·∫£i xu·ªëng", "B·∫°n ƒë√£ h·∫øt l∆∞·ª£t t·∫£i xu·ªëng video vui l√≤ng mua b·∫£n PRO üÖøÔ∏è ƒë·ªÉ kh√¥ng b·ªã gi·ªõi h·∫°n!")
    txa.destroy()
else:
    txa.after(1000, update_downloads_left_label)
    txa.mainloop()

# txa.mainloop()